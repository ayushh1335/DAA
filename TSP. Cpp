#include <iostream>
#include <algorithm>

using namespace std;

const int INF = 1000000000;
int n, dist[10][10], dp[10][10];
bool visited[10];

int tsp(int pos, int count) {
    if (count == n) return dist[pos][0];  // Return to the starting city
    if (dp[pos][count] != -1) return dp[pos][count];

    int ans = INF;
    for (int city = 0; city < n; city++) {
        if (!visited[city]) {
            visited[city] = true;
            ans = min(ans, dist[pos][city] + tsp(city, count + 1));
            visited[city] = false;
        }
    }
    return dp[pos][count] = ans;
}

int main() {
    cout << "Number of cities: ";
    cin >> n;

    cout << "Distance matrix:\n";
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> dist[i][j];

    // Initialize dp array with -1
    for (int i = 0; i < 10; i++)
        for (int j = 0; j < 10; j++)
            dp[i][j] = -1;

    visited[0] = true;
    cout << "Minimum cost: " << tsp(0, 1) << endl;

    return 0;
}
