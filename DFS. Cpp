 #include <iostream>
#include <vector>

#define MAX 10
using namespace std;

int adj[MAX][MAX];  // Adjacency matrix
bool visited[MAX];  // Visited array
int stack[MAX];  // Stack for storing the order
int top = -1;  // Stack pointer

// Function to push elements onto stack
void push(int v) {
    stack[++top] = v;
}

// Function to pop elements from stack
int pop() {
    return stack[top--];
}

// DFS function for Topological Sorting
void topologicalSortUtil(int v, int vertices) {
    visited[v] = true;
    
    // Visit all adjacent vertices
    for (int i = 0; i < vertices; i++) {
        if (adj[v][i] == 1 && !visited[i]) {
            topologicalSortUtil(i, vertices);
        }
    }
    
    // Push the vertex onto stack after visiting all adjacent nodes
    push(v);
}

// Function to perform Topological Sort
void topologicalSort(int vertices) {
    // Initialize visited array
    for (int i = 0; i < vertices; i++) {
        visited[i] = false;
    }

    // Call DFS-based function for each unvisited node
    for (int i = 0; i < vertices; i++) {
        if (!visited[i]) {
            topologicalSortUtil(i, vertices);
        }
    }

    // Print topological order
    cout << "Topological Sort: ";
    while (top != -1) {
        cout << pop() << " ";
    }
    cout << endl;
}

// Main function
int main() {
    int vertices, edges;
    
    cout << "Enter the number of vertices: ";
    cin >> vertices;

    // Initialize adjacency matrix with 0
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            adj[i][j] = 0;
        }
    }

    cout << "Enter the number of edges: ";
    cin >> edges;

    cout << "Enter the edges (u v) format: " << endl;
    for (int i = 0; i < edges; i++) {
        int u, v;
        cin >> u >> v;
        adj[u][v] = 1;  // Directed edge from u to v
    }

    // Perform topological sort
    topologicalSort(vertices);

    return 0;
}
